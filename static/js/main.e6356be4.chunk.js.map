{"version":3,"sources":["store/types.js","store/weather/weatherReducer.js","services/FavoriteService/FavoriteService.js","store/favorites/favoritesReducer.js","store/rootReducer.js","store/store.js","store/favorites/favoritesActions.js","Components/AppHeader/AppHeader.cmp.js","services/WeatherService/WeatherService.js","store/weather/weatherActions.js","Components/FiveDayForecast/FiveDayForecat.cmp.js","Components/MainForecast/MainForecast.cmp.js","Components/InputForm/InputForm.cmp.js","Pages/HomePage/HomePage.cmp.js","Components/FavoritePreview/FavoritePreview.cmp.js","Pages/FavoritesPage/FavoritesPage.cmp.js","App.js","serviceWorker.js","index.js"],"names":["types","FETCH_CITY_CODE","FETCH_CITY_WEATHER","FETCH_FIVE_DAY_FORECAST","USER_INPUT","ADD_FAVORITE_CITY","DELETE_FAVORITE_CITY","SELECTED_CITY","SET_DARK_MODE","SET_FAHRENHEIT_CELSIUS","INITIAL_STATE","cityCode","cityWeather","fiveDayForecast","selectedCity","addCityToFavorites","favorites","favoriteToAdd","find","favorite","id","map","deleteFavorite","favoriteToDelete","filter","darkMode","isFahrenheit","persistConfig","key","storage","whitelist","rootReducer","combineReducers","weatherReducer","state","action","type","payload","favoriteReducer","FavoriteService","persistReducer","middlewares","thunk","store","createStore","applyMiddleware","persist","persistStore","city","connect","dispatch","setDarkMode","isDark","setFahrenheitToggle","setFahrenheit","useState","burgerActive","setBurgerActive","isDarkMode","setIsDarkMode","isFahre","setIsFahre","className","role","aria-label","to","src","style","padding","alt","width","onClick","aria-expanded","data-target","aria-hidden","justifyContent","cursor","href","weatherApi","a","userCity","axios","get","res","data","getCountryCode","getWeather","getFiveDayForecast","fetchData","fetchCityWeatherCode","weatherInput","weatherService","autoCompleteRes","fetchCityWeatherData","cityKey","fetchCityWeather","fetchFiveDayForecast","fetchFiveDayWeather","weather","Day","Icon","format","Date","IconPhrase","Temperature","Minimum","Value","Maximum","toFixed","isFavorite","setIsFavorite","isError","setIsError","useEffect","Key","cogoToast","error","favTimeout","setTimeout","clearTimeout","handleAddToFavorites","favoriteLocation","AdministrativeArea","ID","cityName","LocalizedName","countryName","Country","icon","WeatherIcon","temperature","success","handleDeleteFromFavorites","existingFav","warn","findIndex","Imperial","Metric","WeatherText","DailyForecasts","dayWeather","idx","window","location","reload","userInput","setUserInput","handleSubmit","event","preventDefault","englishRegex","match","loading","then","catch","maxWidth","display","onSubmit","value","label","name","onChange","e","target","placeholder","HomePage","withRouter","history","push","length","exact","path","component","FavoritesPage","Boolean","hostname","ReactDOM","render","persistor","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6356be4.chunk.js","sourcesContent":["const types = {\r\n    FETCH_CITY_CODE: 'FETCH_CITY_CODE',\r\n    FETCH_CITY_WEATHER: 'FETCH_CITY_WEATHER',\r\n    FETCH_FIVE_DAY_FORECAST: 'FETCH_FIVE_DAY_FORECAST',\r\n    USER_INPUT: 'USER_INPUT',\r\n    ADD_FAVORITE_CITY: 'ADD_FAVORITE_CITY',\r\n    DELETE_FAVORITE_CITY: 'DELETE_FAVORITE_CITY',\r\n    SELECTED_CITY: 'SELECTED_CITY',\r\n    SET_DARK_MODE: 'SET_DARK_MODE',\r\n    SET_FAHRENHEIT_CELSIUS: 'SET_FAHRENHEIT_CELSIUS'\r\n};\r\nexport default types;","import types from '../types';\r\n\r\nconst INITIAL_STATE = {\r\n    cityCode: [],\r\n    cityWeather: [],\r\n    fiveDayForecast: [],\r\n    selectedCity: null\r\n}\r\n\r\nexport const weatherReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SELECTED_CITY:\r\n            return {\r\n                ...state,\r\n                selectedCity: action.payload\r\n            }\r\n        case types.FETCH_CITY_CODE:\r\n            return {\r\n                ...state,\r\n                cityCode: action.payload\r\n            }\r\n        case types.FETCH_CITY_WEATHER:\r\n            return {\r\n                ...state,\r\n                cityWeather: action.payload\r\n            }\r\n        case types.FETCH_FIVE_DAY_FORECAST:\r\n            return {\r\n                ...state,\r\n                fiveDayForecast: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nexport default {\r\n    addCityToFavorites,\r\n    deleteFavorite\r\n}\r\n\r\nfunction addCityToFavorites(favorites, favoriteToAdd) {\r\n    const exitingFavorite = favorites.find(favorite => favorite.id === favoriteToAdd.id);\r\n\r\n    if (exitingFavorite) {\r\n        return favorites.map(favorite => {\r\n            return favorite.id === favoriteToAdd.id\r\n                ? { ...favorite } :\r\n                favorite\r\n        })\r\n    }\r\n\r\n    return [...favorites, { ...favoriteToAdd }];\r\n\r\n}\r\n\r\nfunction deleteFavorite(favorites, favoriteToDelete) {\r\n    const filteredFavorites = favorites.filter(favorite => favorite.id !== favoriteToDelete.id);\r\n    return filteredFavorites\r\n}","import types from '../types';\r\nimport FavoriteService from '../../services/FavoriteService/FavoriteService';\r\n\r\nconst INITIAL_STATE = {\r\n    favorites: [],\r\n    darkMode: false,\r\n    isFahrenheit: false\r\n}\r\n\r\nexport const favoriteReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_FAVORITE_CITY:\r\n            return {\r\n                ...state,\r\n                favorites: FavoriteService.addCityToFavorites(state.favorites, action.payload)\r\n            }\r\n        case types.DELETE_FAVORITE_CITY:\r\n            return {\r\n                ...state,\r\n                favorites: FavoriteService.deleteFavorite(state.favorites, action.payload)\r\n            }\r\n        case types.SET_DARK_MODE:\r\n            return {\r\n                ...state,\r\n                darkMode: action.payload\r\n            }\r\n        case types.SET_FAHRENHEIT_CELSIUS:\r\n            return {\r\n                ...state,\r\n                isFahrenheit: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { weatherReducer } from './weather/weatherReducer';\r\nimport { favoriteReducer } from './favorites/favoritesReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favoriteReducer']\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherReducer,\r\n    favoriteReducer\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer)","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './rootReducer'\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persist = persistStore(store);\r\n\r\n","import types from '../types';\r\n\r\nexport const addFavorite = city => ({\r\n    type: types.ADD_FAVORITE_CITY,\r\n    payload: city\r\n})\r\n\r\nexport const deleteFavorite = city => ({\r\n    type: types.DELETE_FAVORITE_CITY,\r\n    payload: city\r\n})\r\n\r\nexport const setDarkMode = isDark => ({\r\n    type: types.SET_DARK_MODE,\r\n    payload: isDark\r\n})\r\n\r\nexport const setFahrenheitToggle = isFahrenheit => ({\r\n    type: types.SET_FAHRENHEIT_CELSIUS,\r\n    payload: isFahrenheit\r\n})\r\n\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setDarkMode, setFahrenheitToggle } from '../../store/favorites/favoritesActions'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './appheader.styles.scss'\r\n\r\nconst AppHeader = ({ setDarkMode, setFahrenheitToggle }) => {\r\n    const [burgerActive, setBurgerActive] = useState(false);\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n    const [isFahre, setIsFahre] = useState(false);\r\n\r\n    const handleBurgerClick = () => {\r\n        if (!burgerActive) setBurgerActive(true);\r\n        else setBurgerActive(false);\r\n    }\r\n\r\n    const handleDarkMode = () => {\r\n        if (!isDarkMode) {\r\n            setIsDarkMode(true);\r\n            setDarkMode(true);\r\n        }\r\n        else {\r\n            setIsDarkMode(false);\r\n            setDarkMode(false);\r\n        }\r\n    }\r\n\r\n    const handleFahrenheitToggle = () => {\r\n        if (!isFahre) {\r\n            setIsFahre(true)\r\n            setFahrenheitToggle(true)\r\n        }\r\n        else {\r\n            setIsFahre(false)\r\n            setFahrenheitToggle(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className={`${isDarkMode ? 'is-dark' : ''} navbar`} role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <Link className=\"logo\" to=\"/\">\r\n                        <img src=\"https://i.imgur.com/5qdECQv.png\" style={{padding: '10px'}} alt=\"logo\" width=\"220\"/>\r\n                    </Link>\r\n\r\n                    <div role=\"button\" onClick={handleBurgerClick} className={`${burgerActive ? 'is-active' : ''} navbar-burger burger`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className={`${burgerActive ? 'is-active' : ''} navbar-menu`}>\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\" style={{ justifyContent: 'center' }}>\r\n                                <div className=\"button is-light\" style={{ cursor: 'pointer' }} href=\"#\" onClick={handleDarkMode}>{isDarkMode ? 'Light Mode' : 'Dark Mode'}</div>\r\n                                <div className=\"button is-light\" style={{ cursor: 'pointer' }} href=\"#\" onClick={handleFahrenheitToggle}>{isFahre ? 'Celsius' : 'Fahrenheit'}</div>\r\n                                <Link className=\"button is-light\" to=\"/\">HOME</Link>\r\n                                <Link className=\"button is-light\" to=\"/favorites\">FAVORITES</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setDarkMode: isDark => dispatch(setDarkMode(isDark)),\r\n    setFahrenheitToggle: setFahrenheit => dispatch(setFahrenheitToggle(setFahrenheit))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(AppHeader);","\r\nimport axios from 'axios';\r\n\r\n\r\nconst weatherApi = 'GEodkJ6YjTCvyszsHyu2ACeDeTBvqjac';\r\n\r\n\r\nasync function getCountryCode(userCity = 'tel aviv') {\r\n    try {\r\n        const res = await axios.get((`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${weatherApi}&q=${userCity}`))\r\n        return res.data[0]\r\n    }\r\n    catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nasync function getWeather(cityCode = '215845') {\r\n    try {\r\n        const res = await axios.get((`https://dataservice.accuweather.com/currentconditions/v1/${cityCode}?apikey=${weatherApi}`))\r\n        return res.data[0]\r\n    }\r\n    catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nasync function getFiveDayForecast(cityCode = '215845') {\r\n    try {\r\n        const res = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityCode}?apikey=${weatherApi}`)\r\n        return res.data\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nexport default {\r\n    getCountryCode,\r\n    getWeather,\r\n    getFiveDayForecast\r\n}","import types from '../types';\r\nimport weatherService from '../../services/WeatherService/WeatherService';\r\n\r\nexport const fetchData = (payload, type) => {\r\n    return {\r\n        payload,\r\n        type\r\n    }\r\n};\r\n\r\nexport const fetchCityWeatherCode = weatherInput => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const autoCompleteRes = await weatherService.getCountryCode(weatherInput);\r\n            dispatch(fetchData(autoCompleteRes, types.FETCH_CITY_CODE));\r\n            return autoCompleteRes;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchCityWeatherData = cityKey => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const fetchCityWeather = await weatherService.getWeather(cityKey)\r\n            dispatch(fetchData(fetchCityWeather, types.FETCH_CITY_WEATHER))\r\n            return fetchCityWeather;\r\n        } catch (error) {\r\n            throw (error)\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchFiveDayForecast = cityKey => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const fetchFiveDayWeather = await weatherService.getFiveDayForecast(cityKey)\r\n            dispatch(fetchData(fetchFiveDayWeather, types.FETCH_FIVE_DAY_FORECAST))\r\n            return fetchFiveDayWeather;\r\n        } catch (error) {\r\n            throw (error);\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const selectedCity = cityName => ({\r\n    type: types.SELECTED_CITY,\r\n    payload: cityName\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport Zoom from 'react-reveal/Zoom';\r\n\r\nimport './fivedayforecast.styles.scss';\r\n\r\nconst FiveDayForecast = ({ weather, isFahrenheit }) => {\r\n    return (\r\n        <Zoom>\r\n            <div className=\"cards-container\">\r\n                <div className='box'>\r\n                    <div className=\"weathercon\"><img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/0${weather.Day.Icon}-s.png`} alt=\"\" /></div>\r\n                    <div className=\"info\">\r\n                        <h2 className=\"location\"><Moment format=\"dddd\">{weather.Date}</Moment></h2>\r\n                        <p className=\"date\"> <Moment format=\"ll\">{weather.Date}</Moment> | {weather.Day.IconPhrase}</p>\r\n                        {\r\n                            isFahrenheit ? <h1 className=\"temp\">{weather.Temperature.Minimum.Value} &deg;F | {weather.Temperature.Maximum.Value} &deg;F</h1>\r\n                                :\r\n                                <h1 className=\"temp\">{((weather.Temperature.Minimum.Value - 32) / 1.8).toFixed()} &deg;C | {((weather.Temperature.Maximum.Value - 32) / 1.8).toFixed()} &deg;C</h1>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Zoom>\r\n    )\r\n}\r\n\r\nconst mapStateTpProps = state => {\r\n    const { isFahrenheit } = state.favoriteReducer\r\n    return {\r\n        isFahrenheit\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTpProps)(FiveDayForecast);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCityWeatherData, fetchCityWeatherCode, fetchFiveDayForecast } from '../../store/weather/weatherActions'\r\nimport { addFavorite } from '../../store/favorites/favoritesActions';\r\nimport { deleteFavorite } from '../../store/favorites/favoritesActions';\r\nimport FiveDayForecast from '../FiveDayForecast/FiveDayForecat.cmp';\r\nimport cogoToast from 'cogo-toast';\r\n\r\nimport './mainforecast.styles.scss';\r\n\r\n\r\nconst MainForecast = ({ cityCode, cityWeather, fiveDayForecast, favorites, isFahrenheit, selectedCity, darkMode, dispatch }) => {\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                if (selectedCity === null) {\r\n                    await dispatch(fetchCityWeatherCode())\r\n\r\n                    await dispatch(fetchCityWeatherData())\r\n\r\n                    await dispatch(fetchFiveDayForecast())\r\n                } else {\r\n                    await dispatch(fetchCityWeatherCode(selectedCity))\r\n\r\n                    await dispatch(fetchCityWeatherData(cityCode.Key))\r\n\r\n                    await dispatch(fetchFiveDayForecast(cityCode.Key))\r\n                }\r\n            } catch (error) {\r\n                cogoToast.error('Something went wrong... try again later!')\r\n                setIsError(true)\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let favTimeout;\r\n        if (isFavorite) {\r\n            favTimeout = setTimeout(() => {\r\n                setIsFavorite(false);\r\n                favTimeout = null;\r\n            }, 300);\r\n        }\r\n        return () => {\r\n            if (favTimeout) {\r\n                clearTimeout(favTimeout);\r\n            }\r\n        }\r\n    }, [isFavorite])\r\n\r\n    const handleAddToFavorites = () => {\r\n        setIsFavorite(!isFavorite);\r\n        const favoriteLocation = {\r\n            id: cityCode.AdministrativeArea.ID,\r\n            cityName: cityCode.LocalizedName,\r\n            countryName: cityCode.Country.LocalizedName,\r\n            icon: cityWeather.WeatherIcon,\r\n            temperature: cityWeather.Temperature\r\n        }\r\n        dispatch(addFavorite(favoriteLocation))\r\n        cogoToast.success(`Successfully saved ${cityCode.LocalizedName} to favorites`);\r\n    }\r\n\r\n    const handleDeleteFromFavorites = () => {\r\n        const existingFav = favorites.find(favorite => favorite.id === cityCode.AdministrativeArea.ID);\r\n        setIsFavorite(!isFavorite);\r\n        dispatch(deleteFavorite(existingFav))\r\n        cogoToast.warn(`Successfully deleted ${cityCode.LocalizedName} from favorites`);\r\n    }\r\n\r\n    const FavoriteIcon = () => {\r\n        const existingFav = favorites.findIndex(favorite => favorite.cityName === cityCode.LocalizedName);\r\n        if (existingFav !== -1) {\r\n            return (\r\n                <div className=\"fav-icon\" onClick={handleDeleteFromFavorites}>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} love heart`}></div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"fav-icon\" onClick={handleAddToFavorites}>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active love' : ''} heart`}></div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                cityCode && cityCode.Country && cityWeather.Temperature && (\r\n                    <div className=\"wrapper\" >\r\n                        <div className=\"card\">\r\n                            <div className=\"header\">\r\n                                <FavoriteIcon />\r\n                                <div className=\"center\">\r\n                                    <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${cityWeather.WeatherIcon}-s.png`} alt=\"\" />\r\n                                    <h1 className=\"value\">{isFahrenheit ? cityWeather.Temperature.Imperial.Value : cityWeather.Temperature.Metric.Value} {isFahrenheit ? <span>&deg;F</span> : <span>&#176;C</span>}</h1>\r\n                                    <h3>{cityWeather.WeatherText}</h3>\r\n                                </div>\r\n                            </div>\r\n                            <div className={`${darkMode ? 'dark-mode' : ''} details`}>\r\n                                <h1 className=\"title\">{cityCode.LocalizedName}, {cityCode.Country.LocalizedName} </h1>\r\n\r\n                                <div className=\"cards-container\">\r\n                                    {fiveDayForecast.DailyForecasts && (\r\n                                        fiveDayForecast.DailyForecasts.map((dayWeather, idx) => (\r\n                                            <FiveDayForecast key={idx} weather={dayWeather} />\r\n                                        ))\r\n                                    )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                )\r\n            }\r\n            {\r\n                isError && (\r\n                    <div id=\"container\">\r\n                        <div id=\"error-box\">\r\n                            <div className=\"shadow move\"></div>\r\n                            <div className=\"message\"><h1 className=\"alert\">Error!</h1><p>oh no, something went wrong.</p></div>\r\n                            <button className=\"button-box\" onClick={() => window.location.reload()}><h1 className=\"red\">try again</h1></button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { cityCode, cityWeather, fiveDayForecast, selectedCity } = state.weatherReducer\r\n    const { favorites, darkMode, isFahrenheit } = state.favoriteReducer\r\n    return {\r\n        cityCode,\r\n        cityWeather,\r\n        fiveDayForecast,\r\n        favorites,\r\n        selectedCity,\r\n        darkMode,\r\n        isFahrenheit\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainForecast);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchFiveDayForecast, fetchCityWeatherCode, fetchCityWeatherData } from '../../store/weather/weatherActions'\r\nimport cogoToast from 'cogo-toast';\r\nimport './inputform.styles.scss';\r\n\r\nconst InputForm = ({ darkMode, dispatch }) => {\r\n    const [userInput, setUserInput] = useState('');\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const englishRegex = /^[a-zA-Z ]+$/\r\n        if (!userInput.match(englishRegex)) return cogoToast.warn('Only English letters please!');\r\n\r\n        cogoToast.loading(\"Loading your data...\")\r\n            .then(() => {\r\n                dispatch(fetchCityWeatherCode(userInput))\r\n                    .then((data) => {\r\n                        dispatch(fetchCityWeatherData(data.Key))\r\n                        dispatch(fetchFiveDayForecast(data.Key))\r\n                        cogoToast.success(\"Data Successfully Loaded\");\r\n                    })\r\n                    .catch(() => {\r\n                        cogoToast.warn(`can't find ${userInput}, try again!`);\r\n                    })\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"input-container\" style={{ maxWidth: '270px' }}>\r\n            <form style={{ display: 'flex' }} onSubmit={handleSubmit}>\r\n                <input className=\"input is-info\" type=\"text\" value={userInput} label=\"userInput\" name=\"userInput\" onChange={e => setUserInput(e.target.value)} placeholder=\"Search Location...\" />\r\n                <button className={`${darkMode ? 'is-light' : 'is-dark'} button`}>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { cityCode } = state.weatherReducer\r\n    const { darkMode } = state.favoriteReducer\r\n    return {\r\n        cityCode,\r\n        darkMode\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(InputForm);","import React from 'react';\r\nimport './homepage.styles.scss';\r\nimport MainForecast from '../../Components/MainForecast/MainForecast.cmp';\r\nimport InputForm from '../../Components/InputForm/InputForm.cmp';\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <InputForm />\r\n            <MainForecast />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { deleteFavorite } from '../../store/favorites/favoritesActions';\r\nimport { selectedCity } from '../../store/weather/weatherActions'\r\nimport cogoToast from 'cogo-toast';\r\nimport './favoritepreview.styles.scss';\r\n\r\n\r\nconst FavoritePreview = ({ favorite, deleteFavorite, history, selectedCity }) => {\r\n\r\n    const handleDelete = () => {\r\n        deleteFavorite(favorite)\r\n        cogoToast.success(`Successfully deleted ${favorite.cityName} from favorites`);\r\n    }\r\n\r\n    const handleCityWeatherToHome = () => {\r\n        selectedCity(favorite.cityName);\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorite-preview\" onClick={handleCityWeatherToHome}>\r\n            <div className=\"cards-container\">\r\n                <div className='box'>\r\n                    <div className=\"weathercon\"><img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${favorite.icon}-s.png`} alt=\"\" /></div>\r\n                    <div className=\"info\">\r\n                        <h2 className=\"location\">{favorite.cityName}, {favorite.countryName}</h2>\r\n                        <div className=\"remove\" onClick={handleDelete}>✕ <br /><span>Delete City</span></div>\r\n                        <h2 className=\"temp\">{((favorite.temperature.Imperial.Value - 32) / 1.8).toFixed()} &deg;C | {favorite.temperature.Imperial.Value} &deg;F</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteFavorite: city => dispatch(deleteFavorite(city)),\r\n    selectedCity: cityName => dispatch(selectedCity(cityName))\r\n})\r\n\r\n\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(FavoritePreview));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FavoritePreview from '../../Components/FavoritePreview/FavoritePreview.cmp';\r\nimport './favoritepage.styles.scss';\r\n\r\n\r\nconst FavoritePage = ({ favorites }) => {\r\n    return (\r\n        <div className=\"favorite-page\">\r\n            <h1>Your Favorites</h1>\r\n            <div className=\"favorite-cards\">\r\n                {\r\n                    favorites.length ? favorites.map(favorite => (\r\n                        <FavoritePreview key={favorite.id} favorite={favorite} />\r\n                    ))\r\n                        :\r\n                        'Not having any favorites... for now 😉'\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { favoriteReducer } = state;\r\n    return {\r\n        favorites: favoriteReducer.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoritePage);","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppHeader from './Components/AppHeader/AppHeader.cmp';\nimport HomePage from './Pages/HomePage/HomePage.cmp';\nimport FavoritesPage from './Pages/FavoritesPage/FavoritesPage.cmp';\nimport './App.scss';\n\n\nconst App = ({ darkMode }) => {\n  return (\n    <div className={`${darkMode ? 'is-dark-mode' : ''} App`}>\n      <Router>\n        <AppHeader />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/favorites\" component={FavoritesPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  const { darkMode } = state.favoriteReducer\n  return {\n    darkMode\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store, persist } from './store/store'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate persistor={persist}>\n            <App />\n        </PersistGate>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}