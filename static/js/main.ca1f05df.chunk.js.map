{"version":3,"sources":["store/types.js","store/weather/weatherReducer.js","services/favoriteService/favoriteService.js","store/favorites/favoritesReducer.js","store/rootReducer.js","store/store.js","store/favorites/favoritesActions.js","Components/AppHeader/AppHeader.cmp.js","services/WeatherService/WeatherService.js","store/weather/weatherActions.js","Components/FiveDayForecast/FiveDayForecat.cmp.js","Components/MainForecast/MainForecast.cmp.js","Components/InputForm/InputForm.cmp.js","Pages/HomePage/HomePage.cmp.js","Components/FavoritePreview/FavoritePreview.cmp.js","Pages/FavoritePage/FavoritePage.cmp.js","App.js","serviceWorker.js","index.js"],"names":["types","FETCH_CITY_CODE","FETCH_CITY_WEATHER","FETCH_FIVE_DAY_FORECAST","USER_INPUT","ADD_FAVORITE_CITY","DELETE_FAVORITE_CITY","SELECTED_CITY","SET_DARK_MODE","SET_FAHRENHEIT_CELSIUS","INITIAL_STATE","cityCode","cityWeather","fiveDayForecast","selectedCity","addCityToFavorites","favorites","favoriteToAdd","find","favorite","id","map","deleteFavorite","favoriteToDelete","filter","item","darkMode","isFahrenheit","persistConfig","key","storage","whitelist","rootReducer","combineReducers","weatherReducer","state","action","type","payload","favoriteReducer","favoriteService","persistReducer","middlewares","thunk","store","createStore","applyMiddleware","persist","persistStore","city","connect","dispatch","setDarkMode","isDark","setFahrenheitToggle","setFahrenheit","useState","burgerActive","setBurgerActive","isDarkMode","setIsDarkMode","isFahre","setIsFahre","className","role","aria-label","to","src","style","padding","alt","width","onClick","aria-expanded","data-target","aria-hidden","justifyContent","cursor","href","weatherApi","a","userCity","axios","get","res","data","getCountryCode","getWeather","getFiveDayForecast","fetchData","fetchCityWeatherCode","weatherInput","weatherService","autoCompleteRes","fetchCityWeatherData","cityKey","then","response","catch","error","fetchFiveDayForecast","weather","console","log","Day","Icon","format","Date","IconPhrase","Temperature","Minimum","Value","Maximum","toFixed","isFavorite","setIsFavorite","isError","setIsError","useEffect","Key","cogoToast","favTimeout","setTimeout","clearTimeout","handleAddToFavorites","favoriteLocation","AdministrativeArea","ID","cityName","LocalizedName","countryName","Country","icon","WeatherIcon","temperature","success","handleDeleteFromFavorites","existingFav","warn","findIndex","Imperial","Metric","WeatherText","DailyForecasts","dayWeather","idx","window","location","reload","userInput","setUserInput","handleSubmit","event","preventDefault","englishRegex","match","loading","maxWidth","display","onSubmit","value","label","name","onChange","e","target","placeholder","HomePage","withRouter","history","push","length","exact","path","component","FavoritePage","Boolean","hostname","ReactDOM","render","persistor","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca1f05df.chunk.js","sourcesContent":["const types = {\r\n    FETCH_CITY_CODE: 'FETCH_CITY_CODE',\r\n    FETCH_CITY_WEATHER: 'FETCH_CITY_WEATHER',\r\n    FETCH_FIVE_DAY_FORECAST: 'FETCH_FIVE_DAY_FORECAST',\r\n    USER_INPUT: 'USER_INPUT',\r\n    ADD_FAVORITE_CITY: 'ADD_FAVORITE_CITY',\r\n    DELETE_FAVORITE_CITY: 'DELETE_FAVORITE_CITY',\r\n    SELECTED_CITY: 'SELECTED_CITY',\r\n    SET_DARK_MODE: 'SET_DARK_MODE',\r\n    SET_FAHRENHEIT_CELSIUS: 'SET_FAHRENHEIT_CELSIUS'\r\n};\r\nexport default types;","import types from '../types';\r\n\r\nconst INITIAL_STATE = {\r\n    cityCode: [],\r\n    cityWeather: [],\r\n    fiveDayForecast: [],\r\n    selectedCity: null\r\n}\r\n\r\nexport const weatherReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.SELECTED_CITY:\r\n            return {\r\n                ...state,\r\n                selectedCity: action.payload\r\n            }\r\n        case types.FETCH_CITY_CODE:\r\n            return {\r\n                ...state,\r\n                cityCode: action.payload\r\n            }\r\n        case types.FETCH_CITY_WEATHER:\r\n            return {\r\n                ...state,\r\n                cityWeather: action.payload\r\n            }\r\n        case types.FETCH_FIVE_DAY_FORECAST:\r\n            return {\r\n                ...state,\r\n                fiveDayForecast: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nexport default {\r\n    addCityToFavorites,\r\n    deleteFavorite\r\n}\r\n\r\nfunction addCityToFavorites(favorites, favoriteToAdd) {\r\n    const exitingFavorite = favorites.find(favorite => favorite.id === favoriteToAdd.id);\r\n\r\n    if (exitingFavorite) {\r\n        return favorites.map(favorite => {\r\n            return favorite.id === favoriteToAdd.id\r\n                ? { ...favorite } :\r\n                favorite\r\n        })\r\n    }\r\n\r\n    return [...favorites, { ...favoriteToAdd }];\r\n\r\n}\r\n\r\nfunction deleteFavorite(favorites, favoriteToDelete) {\r\n    const filteredFavorites = favorites.filter(item => item.id !== favoriteToDelete.id);\r\n    return filteredFavorites\r\n}","import types from '../types';\r\nimport favoriteService from '../../services/favoriteService/favoriteService';\r\n\r\nconst INITIAL_STATE = {\r\n    favorites: [],\r\n    darkMode: false,\r\n    isFahrenheit: false\r\n}\r\n\r\nexport const favoriteReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_FAVORITE_CITY:\r\n            return {\r\n                ...state,\r\n                favorites: favoriteService.addCityToFavorites(state.favorites, action.payload)\r\n            }\r\n        case types.DELETE_FAVORITE_CITY:\r\n            return {\r\n                ...state,\r\n                favorites: favoriteService.deleteFavorite(state.favorites, action.payload)\r\n            }\r\n        case types.SET_DARK_MODE:\r\n            return {\r\n                ...state,\r\n                darkMode: action.payload\r\n            }\r\n        case types.SET_FAHRENHEIT_CELSIUS:\r\n            return {\r\n                ...state,\r\n                isFahrenheit: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { weatherReducer } from './weather/weatherReducer';\r\nimport { favoriteReducer } from './favorites/favoritesReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['favoriteReducer']\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherReducer,\r\n    favoriteReducer\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer)","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './rootReducer'\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persist = persistStore(store);\r\n\r\n","import types from '../types';\r\n\r\nexport const addFavorite = city => ({\r\n    type: types.ADD_FAVORITE_CITY,\r\n    payload: city\r\n})\r\n\r\nexport const deleteFavorite = city => ({\r\n    type: types.DELETE_FAVORITE_CITY,\r\n    payload: city\r\n})\r\n\r\nexport const setDarkMode = isDark => ({\r\n    type: types.SET_DARK_MODE,\r\n    payload: isDark\r\n})\r\n\r\nexport const setFahrenheitToggle = isFahrenheit => ({\r\n    type: types.SET_FAHRENHEIT_CELSIUS,\r\n    payload: isFahrenheit\r\n})\r\n\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setDarkMode, setFahrenheitToggle } from '../../store/favorites/favoritesActions'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './appheader.styles.scss'\r\n\r\nconst AppHeader = ({ setDarkMode, setFahrenheitToggle }) => {\r\n    const [burgerActive, setBurgerActive] = useState(false);\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n    const [isFahre, setIsFahre] = useState(false);\r\n\r\n    const handleBurgerClick = () => {\r\n        if (!burgerActive) setBurgerActive(true);\r\n        else setBurgerActive(false);\r\n    }\r\n\r\n    const handleDarkMode = () => {\r\n        if (!isDarkMode) {\r\n            setIsDarkMode(true);\r\n            setDarkMode(true);\r\n        }\r\n        else {\r\n            setIsDarkMode(false);\r\n            setDarkMode(false);\r\n        }\r\n    }\r\n\r\n    const handleFahrenheitToggle = () => {\r\n        if (!isFahre) {\r\n            setIsFahre(true)\r\n            setFahrenheitToggle(true)\r\n        }\r\n        else {\r\n            setIsFahre(false)\r\n            setFahrenheitToggle(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className={`${isDarkMode ? 'is-dark' : ''} navbar`} role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <Link className=\"logo\" to=\"/\">\r\n                        <img src=\"https://i.imgur.com/5qdECQv.png\" style={{padding: '10px'}} alt=\"logo\" width=\"220\"/>\r\n                    </Link>\r\n\r\n                    <div role=\"button\" onClick={handleBurgerClick} className={`${burgerActive ? 'is-active' : ''} navbar-burger burger`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className={`${burgerActive ? 'is-active' : ''} navbar-menu`}>\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\" style={{ justifyContent: 'center' }}>\r\n                                <div className=\"button is-light\" style={{ cursor: 'pointer' }} href=\"#\" onClick={handleDarkMode}>{isDarkMode ? 'Light Mode' : 'Dark Mode'}</div>\r\n                                <div className=\"button is-light\" style={{ cursor: 'pointer' }} href=\"#\" onClick={handleFahrenheitToggle}>{isFahre ? 'Celsius' : 'Fahrenheit'}</div>\r\n                                <Link className=\"button is-light\" to=\"/\">HOME</Link>\r\n                                <Link className=\"button is-light\" to=\"/favorite\">FAVORITES</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setDarkMode: isDark => dispatch(setDarkMode(isDark)),\r\n    setFahrenheitToggle: setFahrenheit => dispatch(setFahrenheitToggle(setFahrenheit))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(AppHeader);","\r\nimport axios from 'axios';\r\n\r\n\r\nconst weatherApi = 'GEodkJ6YjTCvyszsHyu2ACeDeTBvqjac';\r\n// const weatherApi = 'knnG3d5le7I9GPG1UGpGIpqtXXVXht5D';\r\n\r\n\r\nasync function getCountryCode(userCity = 'tel aviv') {\r\n    try {\r\n        const res = await axios.get((`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${weatherApi}&q=${userCity}`))\r\n        return res.data[0]\r\n    }\r\n    catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nasync function getWeather(cityCode = '215845') {\r\n    try {\r\n        const res = await axios.get((`https://dataservice.accuweather.com/currentconditions/v1/${cityCode}?apikey=${weatherApi}`))\r\n        return res.data[0]\r\n    }\r\n    catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nasync function getFiveDayForecast(cityCode = '215845') {\r\n    try {\r\n        const res = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityCode}?apikey=${weatherApi}`)\r\n        return res.data\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport default {\r\n    getCountryCode,\r\n    getWeather,\r\n    getFiveDayForecast\r\n}","import types from '../types';\r\nimport weatherService from '../../services/WeatherService/WeatherService';\r\n\r\nexport const fetchData = (payload, type) => {\r\n    return {\r\n        payload,\r\n        type\r\n    }\r\n};\r\n\r\nexport const fetchCityWeatherCode = weatherInput => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const autoCompleteRes = await weatherService.getCountryCode(weatherInput);\r\n            dispatch(fetchData(autoCompleteRes, types.FETCH_CITY_CODE));\r\n            return autoCompleteRes;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchCityWeatherData = cityKey => {\r\n    return dispatch => {\r\n        return weatherService.getWeather(cityKey)\r\n            .then(response => {\r\n                dispatch(fetchData(response, types.FETCH_CITY_WEATHER))\r\n                return response;\r\n            })\r\n            .catch(error => {\r\n                throw (error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const fetchFiveDayForecast = cityKey => {\r\n    return dispatch => {\r\n        return weatherService.getFiveDayForecast(cityKey)\r\n            .then(response => {\r\n                dispatch(fetchData(response, types.FETCH_FIVE_DAY_FORECAST))\r\n                return response;\r\n            })\r\n            .catch(error => {\r\n                throw (error);\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport const selectedCity = cityName => ({\r\n    type: types.SELECTED_CITY,\r\n    payload: cityName\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport Zoom from 'react-reveal/Zoom';\r\n\r\nimport './fivedayforecast.styles.scss';\r\n\r\nconst FiveDayForecast = ({ weather, isFahrenheit }) => {\r\n\r\n\r\n    console.log(weather)\r\n    return (\r\n        <Zoom>\r\n            <div className=\"cards-container\">\r\n                <div className='box'>\r\n                    <div className=\"weathercon\"><img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/0${weather.Day.Icon}-s.png`} alt=\"\" /></div>\r\n                    <div className=\"info\">\r\n                        <h2 className=\"location\"><Moment format=\"dddd\">{weather.Date}</Moment></h2>\r\n                        <p className=\"date\"> <Moment format=\"ll\">{weather.Date}</Moment> | {weather.Day.IconPhrase}</p>\r\n                        {\r\n                            isFahrenheit ? <h1 className=\"temp\">{weather.Temperature.Minimum.Value} &deg;F | {weather.Temperature.Maximum.Value} &deg;F</h1>\r\n                                :\r\n                                <h1 className=\"temp\">{((weather.Temperature.Minimum.Value - 32) / 1.8).toFixed()} &deg;C | {((weather.Temperature.Maximum.Value - 32) / 1.8).toFixed()} &deg;C</h1>\r\n                        }\r\n                        {/* {weather.Temperature.Maximum.Value} &deg;F */}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </Zoom>\r\n    )\r\n}\r\n\r\nconst mapStateTpProps = state => {\r\n    const { isFahrenheit } = state.favoriteReducer\r\n    return {\r\n        isFahrenheit\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTpProps)(FiveDayForecast);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchCityWeatherData, fetchCityWeatherCode, fetchFiveDayForecast } from '../../store/weather/weatherActions'\r\nimport { addFavorite } from '../../store/favorites/favoritesActions';\r\nimport { deleteFavorite } from '../../store/favorites/favoritesActions';\r\nimport FiveDayForecast from '../FiveDayForecast/FiveDayForecat.cmp';\r\nimport cogoToast from 'cogo-toast';\r\nimport Zoom from 'react-reveal/Zoom';\r\n\r\nimport './mainforecast.styles.scss';\r\n\r\n\r\nconst MainForecast = ({ cityCode, cityWeather, fiveDayForecast, favorites, isFahrenheit, selectedCity, darkMode, dispatch }) => {\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                if (selectedCity === null) {\r\n                    await dispatch(fetchCityWeatherCode())\r\n\r\n                    await dispatch(fetchCityWeatherData())\r\n\r\n                    await dispatch(fetchFiveDayForecast())\r\n                } else {\r\n                    await dispatch(fetchCityWeatherCode(selectedCity))\r\n\r\n                    await dispatch(fetchCityWeatherData(cityCode.Key))\r\n\r\n                    await dispatch(fetchFiveDayForecast(cityCode.Key))\r\n                }\r\n            } catch (error) {\r\n                cogoToast.error('Something went wrong... try again later!')\r\n                setIsError(true)\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let favTimeout;\r\n        if (isFavorite) {\r\n            favTimeout = setTimeout(() => {\r\n                setIsFavorite(false);\r\n                favTimeout = null;\r\n            }, 300);\r\n        }\r\n        return () => {\r\n            if (favTimeout) {\r\n                clearTimeout(favTimeout);\r\n            }\r\n        }\r\n    }, [isFavorite])\r\n\r\n    const handleAddToFavorites = () => {\r\n        setIsFavorite(!isFavorite);\r\n        const favoriteLocation = {\r\n            id: cityCode.AdministrativeArea.ID,\r\n            cityName: cityCode.LocalizedName,\r\n            countryName: cityCode.Country.LocalizedName,\r\n            icon: cityWeather.WeatherIcon,\r\n            temperature: cityWeather.Temperature\r\n        }\r\n        dispatch(addFavorite(favoriteLocation))\r\n        cogoToast.success(`Successfully saved ${cityCode.LocalizedName} to favorites`);\r\n    }\r\n\r\n    const handleDeleteFromFavorites = () => {\r\n        const existingFav = favorites.find(favorite => favorite.id === cityCode.AdministrativeArea.ID);\r\n        setIsFavorite(!isFavorite);\r\n        dispatch(deleteFavorite(existingFav))\r\n        cogoToast.warn(`Successfully deleted ${cityCode.LocalizedName} from favorites`);\r\n    }\r\n\r\n    const FavoriteIcon = () => {\r\n        const existingFav = favorites.findIndex(favorite => favorite.id === cityCode.AdministrativeArea.ID);\r\n        if (existingFav !== -1) {\r\n            return (\r\n                <div className=\"fav-icon\" onClick={handleDeleteFromFavorites}>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} love heart`}></div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"fav-icon\" onClick={handleAddToFavorites}>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active' : ''} line`}></div>\r\n                    <div className={`${isFavorite ? 'active love' : ''} heart`}></div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                cityCode && cityCode.Country && cityWeather.Temperature && (\r\n                    <div className=\"wrapper\" >\r\n                        <div className=\"card\">\r\n                            <div className=\"header\">\r\n                                <FavoriteIcon />\r\n                                <div className=\"center\">\r\n                                    <img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${cityWeather.WeatherIcon}-s.png`} alt=\"\" />\r\n                                    <h1 className=\"value\">{isFahrenheit ? cityWeather.Temperature.Imperial.Value : cityWeather.Temperature.Metric.Value  } {isFahrenheit ? <span>&deg;F</span> : <span>&#176;C</span>}</h1>\r\n                                    {/* &#176;C */}\r\n                                    {/* cityWeather.Temperature.Imperial.Value */}\r\n                                    <h3>{cityWeather.WeatherText}</h3>\r\n                                </div>\r\n                            </div>\r\n                            <div className={`${darkMode ? 'dark-mode' : ''} details`}>\r\n                                <h1 className=\"title\">{cityCode.LocalizedName}, {cityCode.Country.LocalizedName} </h1>\r\n                                \r\n                                    <div className=\"cards-container\">\r\n                                        {fiveDayForecast.DailyForecasts && (\r\n                                            fiveDayForecast.DailyForecasts.map((dayWeather, idx) => (\r\n                                                <FiveDayForecast key={idx} weather={dayWeather} />\r\n                                            ))\r\n                                        )\r\n                                        }\r\n                                    </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                )\r\n            }\r\n            {\r\n                isError && (\r\n                    <div id=\"container\">\r\n                        <div id=\"error-box\">\r\n                            <div className=\"shadow move\"></div>\r\n                            <div className=\"message\"><h1 className=\"alert\">Error!</h1><p>oh no, something went wrong.</p></div>\r\n                            <button className=\"button-box\" onClick={() => window.location.reload()}><h1 className=\"red\">try again</h1></button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { cityCode, cityWeather, fiveDayForecast, selectedCity } = state.weatherReducer\r\n    const { favorites, darkMode, isFahrenheit } = state.favoriteReducer\r\n    return {\r\n        cityCode,\r\n        cityWeather,\r\n        fiveDayForecast,\r\n        favorites,\r\n        selectedCity,\r\n        darkMode,\r\n        isFahrenheit\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainForecast);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchFiveDayForecast, fetchCityWeatherCode, fetchCityWeatherData } from '../../store/weather/weatherActions'\r\nimport cogoToast from 'cogo-toast';\r\nimport './inputform.styles.scss';\r\n\r\nconst InputForm = ({ darkMode, dispatch }) => {\r\n    const [userInput, setUserInput] = useState('');\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const englishRegex = /^[a-zA-Z ]+$/\r\n        if (!userInput.match(englishRegex)) return cogoToast.warn('Only English letters please!');\r\n\r\n        cogoToast.loading(\"Loading your data...\")\r\n            .then(() => {\r\n                dispatch(fetchCityWeatherCode(userInput))\r\n                    .then((data) => {\r\n                        dispatch(fetchCityWeatherData(data.Key))\r\n                        dispatch(fetchFiveDayForecast(data.Key))\r\n                        cogoToast.success(\"Data Successfully Loaded\");\r\n                    })\r\n                    .catch(() => {\r\n                        cogoToast.warn(`can't find ${userInput}, try again!`);\r\n                    })\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"input-container\" style={{ maxWidth: '270px' }}>\r\n            <form style={{ display: 'flex' }} onSubmit={handleSubmit}>\r\n                <input className=\"input is-info\" type=\"text\" value={userInput} label=\"userInput\" name=\"userInput\" onChange={e => setUserInput(e.target.value)} placeholder=\"Search Location...\" />\r\n                <button className={`${darkMode ? 'is-light' : 'is-dark'} button`}>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { cityCode } = state.weatherReducer\r\n    const { darkMode } = state.favoriteReducer\r\n    return {\r\n        cityCode,\r\n        darkMode\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(InputForm);","import React from 'react';\r\nimport './homepage.styles.scss';\r\nimport MainForecast from '../../Components/MainForecast/MainForecast.cmp';\r\nimport InputForm from '../../Components/InputForm/InputForm.cmp';\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n            <InputForm />\r\n            <MainForecast />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { deleteFavorite } from '../../store/favorites/favoritesActions';\r\nimport { selectedCity } from '../../store/weather/weatherActions'\r\nimport cogoToast from 'cogo-toast';\r\nimport './favoritepreview.styles.scss';\r\n\r\n\r\nconst FavoritePreview = ({ favorite, deleteFavorite, history, selectedCity }) => {\r\n\r\n    const handleDelete = () => {\r\n        deleteFavorite(favorite)\r\n        cogoToast.success(`Successfully deleted ${favorite.cityName} from favorites`);\r\n    }\r\n\r\n    const handleCityWeatherToHome = () => {\r\n        selectedCity(favorite.cityName);\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorite-preview\" onClick={handleCityWeatherToHome}>\r\n            <div className=\"cards-container\">\r\n                <div className='box'>\r\n                    <div className=\"weathercon\"><img src={`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${favorite.icon}-s.png`} alt=\"\" /></div>\r\n                    <div className=\"info\">\r\n                        <h2 className=\"location\">{favorite.cityName}, {favorite.countryName}</h2>\r\n                        <div className=\"remove\" onClick={handleDelete}>✕ <br /><span>Delete City</span></div>\r\n                        <h2 className=\"temp\">{((favorite.temperature.Imperial.Value - 32) / 1.8).toFixed()} &deg;C | {favorite.temperature.Imperial.Value} &deg;F</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteFavorite: city => dispatch(deleteFavorite(city)),\r\n    selectedCity: cityName => dispatch(selectedCity(cityName))\r\n})\r\n\r\n\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(FavoritePreview));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FavoritePreview from '../../Components/FavoritePreview/FavoritePreview.cmp';\r\nimport './favoritepage.styles.scss';\r\n\r\n\r\nconst FavoritePage = ({ favorites }) => {\r\n    return (\r\n        <div className=\"favorite-page\">\r\n            <h1>Your Favorites</h1>\r\n            <div className=\"favorite-cards\">\r\n                {\r\n                    favorites.length ? favorites.map(favorite => (\r\n                        <FavoritePreview key={favorite.id} favorite={favorite} />\r\n                    ))\r\n                        :\r\n                        'Not having any favorites... for now 😉'\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { favoriteReducer } = state;\r\n    return {\r\n        favorites: favoriteReducer.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoritePage);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppHeader from './Components/AppHeader/AppHeader.cmp';\nimport HomePage from './Pages/HomePage/HomePage.cmp';\nimport FavoritePage from './Pages/FavoritePage/FavoritePage.cmp';\nimport './App.scss';\n\n\nconst App = ({darkMode}) => {\n  return (\n    <div className={`${darkMode ? 'is-dark-mode' : ''} App`}>\n      <AppHeader />\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/favorite\" component={FavoritePage} />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  const { darkMode } = state.favoriteReducer\n  return {\n    darkMode\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store, persist } from './store/store'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <PersistGate persistor={persist}>\n                <App />\n            </PersistGate>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}